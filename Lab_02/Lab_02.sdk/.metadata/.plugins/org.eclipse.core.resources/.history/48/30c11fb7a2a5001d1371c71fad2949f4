//#include <stdio.h>
//
//int main(void){
//	uint32_t *regmap = (uint32_t *) 0x70000000;
//
//	for(size_t i = -100; i < 100; i++){
//		regmap[0] = i;
//		for(size_t j = -100; j < 100; j++){
//			regmap[1] = j;
//
//			//ADD
//			regmap[2] = 4;
//			size_t r = i + j;
////			printf("%2zu + %2zu = %3zu \n", i, j, r);
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//UADD
//			regmap[2] = 5;
//			 r = i + j;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//SUB
//			regmap[2] = 6;
//			 r = i - j;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//USUB
//			regmap[2] = 7;
//			 r = i - j;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//logical and
//			regmap[2] = 0;
//			size_t r = i && j;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//logical or
//			regmap[2] = 1;
//			 r = i || j;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//logical XOR
//			regmap[2] = 2;
//			 r = i^j;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//logical NOR
//			regmap[2] = 3;
//			 r = !(i || j);
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//Comparator STL
//			regmap[2] = 10;
//			if(i < j){
//				r = 1;
//			}
//			else{
//				r = 0;
//			}
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//Comparator STLU
//			regmap[2] = 11;
//			if(i < j){
//				r = 1;
//			}
//			else{
//				r = 0;
//			}
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//		}
//
//
//		for(size_t k = -32; k < 32; k++){
//
//			//LSL
//			regmap[2] = 12;
//			size_t r = i << k;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//
//			//LSR
//			regmap[2] = 14;
//			r = i >> k;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//
//			//ASR
//			regmap[2] = 15;
//			r = i << k;
//			if(regmap[0] != r){
//				printf("ERR");
//			}
//		}
//	}
//	printf("Simulation Finished Successfully!");
//}









#include <stdio.h>
#include <stdlib.h>
#include <math.h>

//testbench
int main(void)
{
	uint32_t *regmap = (uint32_t *) 0x70000000; // base address of axi_regmap as set in the Vivado address editor

	// Random A and B values
	size_t A;
	size_t B;
	A = rand() & 0xff;
	A |= (rand() & 0xff) << 8;
	A |= (rand() & 0xff) << 16;
	A |= (rand() & 0xff) << 24;
	A = (rand() << 17) + (rand() << 2) + (rand() % 3);
	B = rand() & 0xff;
	B |= (rand() & 0xff) << 8;
	B |= (rand() & 0xff) << 16;
	B |= (rand() & 0xff) << 24;
	B = (rand() << 17) + (rand() << 2) + (rand() % 3);


	// Testing logical unit
	printf("Testing logical unit\n");

	// Testing logical AND, OR, XOR, NOR
	printf("Logical AND\n");
	regmap[2] = 0;
	regmap[0] = A;
	regmap[1] = B;
	size_t r  = regmap[0];
	printf("%2zu AND %2zu = %3zu (%s)\n", A, B, r, (r == (A&B)) ? "PASSED" : "ERR");

	printf("\nLogical OR\n");
	regmap[2] = 1;
	r  = regmap[0];
	printf("%2zu OR %2zu = %3zu (%s)\n", A, B, r, (r == (A|B)) ? "PASSED" : "ERR");

	printf("\nLogical XOR\n");
	regmap[2] = 2;
	r  = regmap[0];
	printf("%2zu XOR %2zu = %3zu (%s)\n", A, B, r, (r == (A^B)) ? "PASSED" : "ERR");

	printf("\nLogical NOR\n");
	regmap[2] = 3;
	r  = regmap[0];
	printf("%2zu NOR %2zu = %3zu (%s)\n", A, B, r, (r == ~(A|B)) ? "PASSED" : "ERR");

	// Testing shift unit----------------------------------------------------------------------------------------------------
	printf("\n\nTesting shift unit\n");

	// Logical left shift
	printf("\nLogic left shift\n");
	A = 0xFEDCBA98;
	//A = 0x1EDCBA98;
	regmap[0] = A;
	// Logical left shift
	regmap[2] = 12;
	for (size_t i = 0; i <= 31; i++) {
		regmap[3] = i;
		size_t r  = regmap[0];
		printf("%2zu logic << %2zu = %3zu (%s)\n", A, i, r, (r == A<<i) ? "PASSED" : "ERR");
	}

	// Arithmetic left shift
	printf("\n\nArithmetic left shift\n");
	regmap[2] = 13;
	for (size_t i = 0; i <= 31; i++) {
		regmap[3] = i;
		size_t r  = regmap[0];
		printf("%2zd arithmetic << %2zu = %3zd (%s)\n", A, i, r, (r == (signed int)A<<i) ? "PASSED" : "ERR");
	}

	// Logical right shift
	printf("\n\nLogic right shift\n");
	regmap[2] = 14;
	for (size_t i = 0; i <= 31; i++) {
		regmap[3] = i;
		size_t r  = regmap[0];
		printf("%2zu logical >> %2zu = %3zu (%s)\n", A, i, r, (r == A>>i) ? "PASSED" : "ERR");
	}

	// Arithmetic right shift
	printf("\n\nArithmetic right shift\n");
	regmap[2] = 15;
	for (size_t i = 0; i <= 31; i++) {
		regmap[3] = i;
		size_t r  = regmap[0];
		printf("%2zd arithmetic >> %2zu = %3zd (%s)\n", A, i, r, (r == (signed int)A>>i) ? "PASSED" : "ERR");
	}

	// Testing comparison unit
	printf("\n\nTesting comparison unit\n");

	// Signed comparison
	printf("\nSigned comparison\n");
	regmap[2] = 10;
	r  = regmap[0];
	printf("%2zd less than %2zd == %3zu (%s)\n", A, B, r, (r == ((signed int)A < (signed int)B)) ? "PASSED" : "ERR");

	// Signed comparison
	printf("\nUnsigned comparison\n");
	regmap[2] = 11;
	r  = regmap[0];
	printf("%2zu less than %2zu == %3zu (%s)\n", A, B, r, (r == (A < B)) ? "PASSED" : "ERR");

	// Testing comparison unit
	printf("\n\nTesting arithmetic unit\n");

	// Signed addition
	printf("\nSigned addition\n");
	regmap[2] = 4;
	r  = regmap[0];
	printf("%2zd + %2zd == %3zd (%s)\n", A, B, r, ((signed int)r == ((signed int)A + (signed int)B)) ? "PASSED" : "ERR");

	// Unsigned addition
	printf("\nUnsigned addition\n");
	regmap[2] = 5;
	r  = regmap[0];
	printf("%2zu + %2zu == %3zu (%s)\n", A, B, r, (r == (A + B)) ? "PASSED" : "ERR");

	// Signed addition
	printf("\nSigned subtraction\n");
	regmap[2] = 6;
	r  = regmap[0];
	printf("%2zd - %2zd == %3zd (%s)\n", A, B, r, ((signed int)r == ((signed int)A - (signed int)B)) ? "PASSED" : "ERR");

	// Unsigned addition
	printf("\nUnsigned subtraction\n");
	regmap[2] = 7;
	r  = regmap[0];
	printf("%2zu - %2zu == %3zu (%s)\n", A, B, r, (r == (A - B)) ? "PASSED" : "ERR");

	return 0;
}

